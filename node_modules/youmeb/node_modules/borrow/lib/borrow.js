'use strict';

(function (global) {
  // borrow(to)(method, from) 
  // borrow(from, to)(method)
  // borrow(method, from, to)
  var borrow = function (method, from, to) {
    switch (arguments.length) {
      case 0:
        return borrow;
        break;
      case 1:
        to = method;
        return function (method, from) {
          return borrow(method, from, to);
        };
        break;
      case 2:
        to = from;
        from = method;
        return function (method) {
          return borrow(method, from, to);
        };
        break;
    }
    if (!(method instanceof Array)) {
      method = [method];
    }
    method.forEach(function (method) {
      to[method] = function () {
        var result = from[method].apply(to._borrowApplyTo || to, arguments);
        return result === from ? to : result;
      };
    });
  };

  // 判斷是否需要建立 function
  function run(obj) {
    if (obj._borrowFrom && obj._borrow) {
      borrow(obj._borrow, obj._borrowFrom, obj);
      obj._borrow = null;
    }
  }

  // 讓每個 javascript object 都有 borrow 這個 method
  // 定義要藉哪些 method
  // 
  // Example:
  //   
  //   obj.borrow(['method1', 'method2']);
  Object.defineProperty(Object.prototype, 'borrow', {
    value: function (method) {
      var methods = this._borrow || [];
      if (method instanceof Array) {
        methods = methods.concat(method);
      } else {
        methods.push(method);
      }
      this._borrow = methods;
      var that = this;
      var methods =  {
        from: function () {
          that.borrowFrom.apply(that, arguments);
          return methods;
        },
        apply: function () {
          that.borrowApplyTo.apply(that, arguments);
          return methods;
        },
        thanks: function () {
          run(that);
          return that;
        }
      };
      return methods;
    }
  });

  // 定義要從哪裡藉 method
  //
  // Example:
  //   
  //   obj
  //    .borrow(['method1', 'method2'])
  //    .from(obj2);
  Object.defineProperty(Object.prototype, 'borrowFrom', {
    value: function (from) {
      this._borrowFrom = from;
      return this;
    }
  });

  Object.defineProperty(Object.prototype, 'borrowApplyTo', {
    value: function (applyTo) {
      this._borrowApplyTo = applyTo;
      return this;
    }
  });

  (function (b) {
    if (global.window) {
      global.borrow = b;
    } else if (global.module && global.module.exports) {
      module.exports = b;
    }
  })(function (method, from, to) {
    return borrow(method, from, to);
  });
})(this);
