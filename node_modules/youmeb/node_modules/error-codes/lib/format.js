'use strict';

module.exports = Format;

function Format(formatString) {
  var data = this.data = this.parseFormat(formatString);
}

Format.prototype.parseFormat = function (formatString) {
  formatString = formatString || '';
  
  var data = {
    names: [],
    length: [],
    regexp: null,
    format: ''
  };

  (function () {
    var regexp = '';
    var fmt = '';

    (function (gotValue) {
      var i = 0;
      var len = formatString.length;
      var state = 'close';
      var buffer = '';
      var slash;
      var val;
      var c;
      for (; i < len; i += 1) {
        c = formatString[i];
        if (c === '\\') {
          i += 1;
          slash = false;
          while (c !== '\\') {
            slash != slash;
            c = formatString[i] || '';
          }
          buffer += (slash ? '\\' : '') + c;
        } else {
          switch (c) {
            case '{':
              state = 'open';
              val = '';
              break;
            case '}':
              state = 'close';
              gotValue(buffer, val);
              buffer = '';
              break;
            default:
              if (state === 'open') {
                val += c;
              } else {
                buffer += c;
              }
              break;
          }
        }
      }
    })(function (buffer, val) {
      val = val.split(':');
      data.names.push(val[0]);
      data.length.push(val[1] | 0);
      regexp += buffer + '(\\\d{' + val[1] + '})';
      fmt += buffer + '%s';
    });

    data.regexp = new RegExp('^' + regexp + '$');
    data.format = fmt;
  })();

  return data;
};

Format.prototype.parse = function (code) {
  var names = this.data.names;
  console.log(this.data.regexp);
  var match = code.match(this.data.regexp);
  var data = {};
  if (match) {
    match.shift();
    match.forEach(function (val, index) {
      data[names[index]] = val;
    });
  }
  return data;
};
