'use strict';

var util = require('util');
var Format = require('./format');

module.exports = function (formatString) {
  var format = new Format(formatString);
  var errors = {};
  var levels = [];
  var message = {};
  var id = (function () {
    var c = [];
    return function (level) {
      var i = (c[level] | 0) + 1;
      return c[level] = i;
    };
  })();

  format.data.names.forEach(function (name, index) {
    levels[index] = {};
  });

  errors.define = function (key, msg) {
    getKeys(key).forEach(function (val, index) {
      if (!levels[index].hasOwnProperty(val)) {
        levels[index][val] = realCode(id(index), format.data.length[index]);
      }
    });
    message[key] = msg;
  };

  errors.defineFromJSON = function (data) {
    Object.keys(data).forEach(function (key) {
      errors.define(key, data[key]);
    });
  };

  errors.generate = function (key, msg) {
    var err = new Error(message[key] || msg);
    err.code = errors.code(key);
    return err;
  };

  errors.code = function (key) {
    var codes = [];
    getKeys(key).forEach(function (name, index) {
      codes.push(levels[index][name]);
    });
    return errors.format.apply(null, codes);
  };

  errors.format = function () {
    var args = Array.prototype.slice.call(arguments);
    args.unshift(format.data.format);
    return util.format.apply(null, args);
  };

  errors.getAllErrors = function () {
    var re = [];
    Object.keys(message).forEach(function (key) {
      re.push({
        key: key,
        code: errors.code(key),
        message: message[key]
      });
    });
    return re;
  };

  return errors;
};

function getKeys(key) {
  var keys = key.replace(/\\\./g, '\uffff').split('.');
  keys.forEach(function (key, index) {
    keys[index] = key.replace(/\uffff/g, '.');
  });
  return keys;
}

function realCode(code, len) {
  code += '';
  var i = len - code.length;
  if (i > 0) {
    while (i--) {
      code = '0' + code;
    }
  } else {
    code = code.substr(0, len);
  }
  return code;
}
